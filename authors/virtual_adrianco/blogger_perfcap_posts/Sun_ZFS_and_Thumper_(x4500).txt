Title: Sun ZFS and Thumper (x4500)
URL: https://perfcap.blogspot.com/2006/08/sun-zfs-and-thumper-x4500.html

<div xmlns="http://www.w3.org/1999/xhtml"><p>I was one of the beta testers for Sun's new <a href="http://www.sun.com/servers/x64/x4500/">x4500</a> high density storage server, and it turned out pretty well. I was able to hire <a href="http://www.ortera.com">Dave Fisk</a> as a consultant to help me do the detailed evaluation using his in-depth tools, and it turned into a fascinating investigation of the detailed behavior of the <span>ZFS</span> <span>file system</span>.</p>  <p><span><a href="http://www.sun.com/software/solaris/zfs_learning_center.jsp">ZFS</a></span> is simple to use, has lots of extremely useful features, and the price is right (bundled with <span>Solaris</span> 10 6/06 or <span>OpenSolaris</span>). However its doing lots of clever things under the hood and it behaves like nothing else. Its far more complicated to predict its performance than any other <span>file system</span> we've looked at. It even baffled Dave at first, he had to change his tools to support ZFS, but he's got it pretty well figured out now.<br/> </p>  <p>For a start, its a write <span>anyware</span> <span>file system</span> layout (<span>WAFL</span>) which is similar in some ways to a <span>NetApp</span> filer. This means that random writes are batched up, sorted by file, <span>file system</span> etc. and every few seconds a big burst of sequential writes commits the data to disk as a transaction. Since sequential writes to disk are always much more efficient than random writes, this mean that it gets much more performance per disk than <span>UFS</span>/<span>VxFS</span> etc for random writes.</p>  <p>The combination of the x4500 and <span>ZFS</span> works well, since <span>ZFS</span> knows that the firmware on the 48 <span>SATA</span> drives in the x4500 have a write cache that can safely be enabled and flushed on demand. This greatly improves performance and fixes an issue that I have been complaining about for years. Finally a safe way to use the write caches that exist in every modern drive.<br/> </p>  <p>Its actually easier to list the things that <span>ZFS</span> on the x4500 <i>doesn't have</i>.</p>  <ul> <li>No extra cost - its bundled in a free OS<br/> </li> <li>No volume manager - its built in</li> <li>No space management - <span>file systems</span> use a common pool<br/> </li> <li>No long wait for <span>newfs</span> to finish - we created a 3TB <span>file system</span> in a second</li> <li>No <span>fsck</span> - its transactional commit means its consistent on disk</li> <li>No <span>rsync</span> - snapshots can be differenced and replicated remotely</li> <li>No silent data corruption - all data is checksummed as it is read</li> <li>No bad archives - all the data in the <span>file system</span> is scrubbed regularly</li> <li>No penalty for software RAID - RAID-Z has a clever optimization</li> <li>No downtime - mirroring, RAID-Z and hot spares</li> <li>No immediate maintenance - double parity disks if you need them</li> <li>No hardware failures in our testing - we didn't get to try out some of these features!<br/> </li> </ul> <p>and finally, on the downside<br/> </p>  <ul> <li>No way to know how much performance headroom you have<br/> </li> <li>No way to get at the disks without taking the top off the x4500<br/> </li> <li>No clustering support - I guess they couldn't put everything on the wish list...</li> </ul> <p>The performance is actually very good, and in normal use its going to be fine, but when we tried to drive <span>ZFS</span> to its limit, we found that the results were less consistent or predictable than more conventional <span>file systems</span>. Some of the issues we ran into are present in the <span>Solaris</span> 10 6/06 release, but when the x4500 ships it will have an update to <span>ZFS</span> that includes performance fixes to speed things up in general and reduce the impact of the worst case issues, so it should be more consistent.</p>  <p>We've put <span>ZFS</span> on some of our internal file servers, to see how it goes in light usage. However, it always takes a while to build up confidence in a large body of new code, especially if its storage related. If we can add this one to the list:</p>  <ul> <li>No nasty bugs or surprises?<br/> </li> </ul> <p>Then <span>ZFS</span> looks like a good way to take a lot of cost out of the storage tier.</p>  <p>I'm interested to hear how other people are getting on with <span>ZFS</span>, especially mission critical production uses.<br/> </p>  <p/>  <p style="font-size:10px;text-align:right;">technorati tags:<a href="http://technorati.com/tag/ZFS" rel="tag">ZFS</a>, <a href="http://technorati.com/tag/Solaris" rel="tag">Solaris</a>, <a href="http://technorati.com/tag/x4500" rel="tag">x4500</a>, <a href="http://technorati.com/tag/Thumper" rel="tag">Thumper</a>, <a href="http://technorati.com/tag/Ortera" rel="tag">Ortera</a></p><p style="text-align: right; font-size: 8px">Blogged with <a href="http://www.flock.com" target="_new" title="Flock">Flock</a></p></div>