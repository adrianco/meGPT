Title: Data structures and objects
URL: https://perfcap.blogspot.com/2005/03/data-structures-and-objects.html

The exacct data file is a complex tagged object format that is read via the libexacct library routines. While generic and flexible, it is a pain to get at the data. There are two demo programs that display the information, I used /usr/demo/libexacct/exdump to print out the information shown earlier, and there is also a perl library and a script called dumpexacct.pl. It displays the tags and types like this:<br /><br /><pre><br />GROUP<br />  Catalog = EXT_GROUP|EXC_DEFAULT|EXD_GROUP_PROC<br />  ITEM<br />    Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_PID<br />    Value = 1904<br />  ITEM<br />    Catalog = EXT_UINT32|EXC_DEFAULT|EXD_PROC_UID<br />    Value = 25<br />...<br /></pre><br /><br />I used this information to define a data structure that will be populated with the data from the file as the first processing step. I left the tags as comments, and defined reasonable amounts of fixed space for strings. The task and flow structures are similar.<br /><br /><pre><br />struct ex_proc { // EXT_GROUP|EXC_DEFAULT|EXD_GROUP_PROC<br /> uint32_t pid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_PID<br /> uint32_t uid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_UID<br /> uint32_t gid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_GID<br /> uint32_t projid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_PROJID<br /> uint32_t taskid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_TASKID<br /> uint64_t cpu_user_sec; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CPU_USER_SEC<br /> uint64_t cpu_user_nsec; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CPU_USER_NSEC<br /> uint64_t cpu_sys_sec; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CPU_SYS_SEC<br /> uint64_t cpu_sys_nsec; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CPU_SYS_NSEC<br /> uint64_t proc_start_sec; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_START_SEC<br /> uint64_t proc_start_nsec;// EXT_UINT64|EXC_DEFAULT|EXD_PROC_START_NSEC<br /> uint64_t proc_finish_sec;// EXT_UINT64|EXC_DEFAULT|EXD_PROC_FINISH_SEC<br /> uint64_t proc_finish_nsec;// EXT_UINT64|EXC_DEFAULT|EXD_PROC_FINISH_NSEC<br /> char  command[PRFNSZ];// EXT_STRING|EXC_DEFAULT|EXD_PROC_COMMAND<br /> uint32_t tty_major; // EXT_UINT32|EXC_DEFAULT|EXD_PROC_TTY_MAJOR<br /> uint32_t tty_minor; // EXT_UINT32|EXC_DEFAULT|EXD_PROC_TTY_MINOR<br />#define EX_SYS_NMLN 40 // SYS_NMLN = 257 - too much<br /> char  hostname[EX_SYS_NMLN]; // EXT_STRING|EXC_DEFAULT|EXD_PROC_HOSTNAME<br /> uint64_t major_faults; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_FAULTS_MAJOR<br /> uint64_t minor_faults; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_FAULTS_MINOR<br /> uint64_t messages_snd; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_MESSAGES_SND<br /> uint64_t messages_rcv; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_MESSAGES_RCV<br /> uint64_t blocks_in; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_BLOCKS_IN<br /> uint64_t blocks_out; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_BLOCKS_OUT<br /> uint64_t chars_rdwr; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CHARS_RDWR<br /> uint64_t vctx;  // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CONTEXT_VOL<br /> uint64_t ictx;  // EXT_UINT64|EXC_DEFAULT|EXD_PROC_CONTEXT_INV<br /> uint64_t signals; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_SIGNALS<br /> uint64_t swaps;  // EXT_UINT64|EXC_DEFAULT|EXD_PROC_SWAPS<br /> uint64_t syscalls; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_SYSCALLS<br /> uint32_t acct_flags; // EXT_UINT32|EXC_DEFAULT|EXD_PROC_ACCT_FLAGS<br /> uint32_t ppid;  // EXT_UINT32|EXC_DEFAULT|EXD_PROC_ANCPID<br /> uint32_t wait_status; // EXT_UINT32|EXC_DEFAULT|EXD_PROC_WAIT_STATUS<br />#define EX_ZONENAME 64<br /> char  zonename[EX_ZONENAME]; // EXT_STRING|EXC_DEFAULT|EXD_PROC_ZONENAME<br /> uint64_t mem_rss_avg_k; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_MEM_RSS_AVG_K<br /> uint64_t mem_rss_max_k; // EXT_UINT64|EXC_DEFAULT|EXD_PROC_MEM_RSS_MAX_K<br /> };<br /></pre>