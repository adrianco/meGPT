Title: Comparing NoSQL Availability Models
URL: https://perfcap.blogspot.com/2010/10/comparing-nosql-availability-models.html

<div>let's risk feeding the <a href="http://codahale.com/you-cant-sacrifice-partition-tolerance/">CAP</a> trolls, and try to get some insight into the differences between the many NoSQL contenders. I have circulated an earlier version of this to a few people and got at least one good response. If you have answers, or would like to suggest additional questions, comment here, tweet me @adrianco or blog it yourself.</div><div><br /></div><div><ul><li><a href="http://perfcap.blogspot.com/2010/10/nosql-netflix-use-case-comparison-for.html">Riptano/Cassandra's response is here</a></li><li><a href="http://perfcap.blogspot.com/2010/10/nosql-netflix-use-case-comparison-for_31.html">10gen/MongoDB's response is here</a></li><li><a href="http://perfcap.blogspot.com/2010/11/nosql-netflix-use-case-comparison-for.html">Basho/Riak's response is here</a></li><li><a href="http://perfcap.blogspot.com/2010/11/nosql-netflix-use-case-comparison-for_17.html">Translattice's response is here</a></li></ul></div><div><br /></div><div><b><span class="Apple-style-span" style="font-size: large;">Use Case Scenario for Comparison Across NoSQL Contenders </span></b></div>While each NoSQL contender has different strengths and will be used for different things, we need a basis for comparison across them, so that we understand the differences in behavior. Here is a sample scenario that I am publishing to put to each vendor to get their answers and will post the results here. The example is non-trivial and is based on a simplified Netflix related scenario that is applicable to any web service that reliably collects data from users via an API. I assume that is running on AWS and use that terminology, but the concepts are generic.<br /><br /><span class="Apple-style-span" style="font-size: large;"><b>Use Case</b></span><span class="Apple-style-span" style="font-size: large;"><br /></span>A TV based device calls the API to add a movie to its favorites list (like the Netflix instant queue, but I have simplified the concept here), then reads back the entire list to ensure it is showing the current state. The API does not use cookies, and the load balancer (Amazon Elastic Load Balancer) is round robin, so the second request goes to a different API server, that happens to be in a different Amazon Availability Zone, and needs to respond with the modified list.<div><br /><span class="Apple-style-span" style="font-size: large;"><b>Favorites Storage<br /></b></span>Favorites store is implemented using a NoSQL mechanism that persistently stores a single key=user value=movielist record on writes, and returns the movielist on reads.<br /><br /><span class="Apple-style-span" style="font-size: large;"><b>Question 1: Availability Zones<br /></b></span>When an API reads and writes to a queue store using the NoSQL mechanism, is the traffic routing Availability Zone aware? Are reads satisfied locally, or spread over all zones, is the initial write local or spread over the zones, is the write replication zone aware so data is replicated to more than one zone?&nbsp;<br /><br /><span class="Apple-style-span" style="font-size: large;"><b>Question 2: Partitioned Behavior with Two Zones<br /></b></span>If the connection between two zones fails, and a partition occurs so that external traffic coming into and staying within a zone continues to work, but traffic between zones is lost, what happens? In particular, which of these outcomes does the NoSQL service support?<br /><ul><li>one zone decides that it is still working for reads and writes but half the size, and the other zone decide it is offline</li><li>both zones continue to satisfy reads, but refuse writes until repaired</li><li>data that has a master copy in the good zone supports read and write, slave copies stop for both read and write</li><li>both zones continue to accept writes, and attempt to reconcile any inconsistency on repair</li></ul><span class="Apple-style-span" style="font-size: large;"><b>Question 3: Appending a movie to the favorites list<br /></b></span>If an update is performed by read-modify-write of the entire list, what mechanisms can be used to avoid race conditions? If multiple attribute/values are supported for a key, can an additional value be written directly without reading first? What limits exist on the size of the value or number of attribute/values, and are queries by attribute/value supported?<br /><br /></div><div><span class="Apple-style-span" style="font-size: large;"><b>Question 4: Handling Silent Data Corruption</b></span></div><div>When the storage or network subsystem corrupts data without raising an error, does the NoSQL service detect and correct this? When is it detected and corrected, on write, on read or asynchronously?</div><div><br /></div><div><span class="Apple-style-span" style="font-size: large;"><b>Question 5: Backup and Restore</b></span></div><div>Without stopping incoming requests, how can a point in time backup of the entire dataset be performed? What is the performance and availability impact during the backup? For cases such as roll-back after a buggy application code push, how is a known good version of the dataset restored, how is it made consistent, and what is the performance and availability impact during the restore? Are there any scalability limits on the backed up dataset size, what's the biggest you have seen?</div><div><br /></div>