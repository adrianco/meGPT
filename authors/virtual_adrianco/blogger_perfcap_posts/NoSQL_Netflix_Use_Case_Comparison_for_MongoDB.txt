Title: NoSQL Netflix Use Case Comparison for MongoDB
URL: https://perfcap.blogspot.com/2010/10/nosql-netflix-use-case-comparison-for_31.html

<span class="Apple-style-span"  style="font-size:medium;">Roger Bodamer @rogerb from </span><a href="http://www.10gen.com/"><span class="Apple-style-span"  style="font-size:medium;">10gen.com</span></a><span class="Apple-style-span"  style="font-size:medium;"> kindly provided a set of answers for MongoDB  that I have interspersed with the questions below. The original set of questions </span><a href="http://perfcap.blogspot.com/2010/10/comparing-nosql-availability-models.html"><span class="Apple-style-span"  style="font-size:medium;">are posted here</span></a><span class="Apple-style-span"  style="font-size:medium;">. Each NoSQL contender will get their own blog post with answers, when there are enough to be interesting, I will write some summary comparisons. If you have answers or would like to suggest additional questions, comment here, tweet me @adrianco or blog it yourself.<br /><br /></span><div><b><span class="Apple-style-span"  style="font-size:medium;">Use Case Scenario for Comparison Across NoSQL Contenders </span></b></div><span class="Apple-style-span"  style="font-size:medium;">While each NoSQL contender has different strengths and will be used for different things, we need a basis for comparison across them, so that we understand the differences in behavior. Here is a sample scenario that I am publishing to put to each vendor to get their answers and will post the results here. The example is non-trivial and is based on a simplified Netflix related scenario that is applicable to any web service that reliably collects data from users via an API. I assume that is running on AWS and use that terminology, but the concepts are generic.<br /><br /></span><span class="Apple-style-span"><b><span class="Apple-style-span"  style="font-size:medium;">Use Case</span></b></span><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span><span class="Apple-style-span"  style="font-size:medium;">A TV based device calls the API to add a movie to its favorites list (like the Netflix instant queue, but I have simplified the concept here), then reads back the entire list to ensure it is showing the current state. The API does not use cookies, and the load balancer (Amazon Elastic Load Balancer) is round robin, so the second request goes to a different API server, that happens to be in a different Amazon Availability Zone, and needs to respond with the modified list.</span><div><span class="Apple-style-span"  style="font-size:medium;"><br /></span><b><span class="Apple-style-span"  style="font-size:medium;">Favorites Storage<br /></span></b><span class="Apple-style-span"  style="font-size:medium;">Favorites store is implemented using a NoSQL mechanism that persistently stores a single key=user value=movielist record on writes, and returns the movielist on reads.<br /><br /></span><b><span class="Apple-style-span"  style="font-size:medium;">Question 1: Availability Zones<br /></span></b><span class="Apple-style-span"  style="font-size:medium;">When an API reads and writes to a queue store using the NoSQL mechanism, is the traffic routing Availability Zone aware? Are reads satisfied locally, or spread over all zones, is the initial write local or spread over the zones, is the write replication zone aware so data is replicated to more than one zone?<br /></span></div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">Let's assume for discussion purposes that we are using MongoDB across </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">three availability zones in a region.  We would have a replica set </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">member in each of the three zones.  One member will be elected primary </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">at a given point in time.</span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"><br /></span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">All writes will be sent to the primary, and then propagate to </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">secondaries from there.  Thus, writes are often inter-zone.  However </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">availability zones are fairly low latency (I assume the context here </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">is EC2).</span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"><br /></span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">Reads can be either to the primary, if immediate/strong consistency </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">semantics are desired, or to the local zone member, if eventually </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">consistent read semantics are acceptable.</span></i></span></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></p><b><span class="Apple-style-span"  style="font-size:medium;">Question 2: Partitioned Behavior with Two Zones<br /></span></b><span class="Apple-style-span"  style="font-size:medium;">If the connection between two zones fails, and a partition occurs so that external traffic coming into and staying within a zone continues to work, but traffic between zones is lost, what happens? In particular, which of these outcomes does the NoSQL service support?<br /></span><ul><li><span class="Apple-style-span"  style="font-size:medium;">one zone decides that it is still working for reads and writes but half the size, and the other zone decide it is offline</span></li><li><span class="Apple-style-span"  style="font-size:medium;">both zones continue to satisfy reads, but refuse writes until repaired</span></li><li><span class="Apple-style-span"  style="font-size:medium;">data that has a master copy in the good zone supports read and write, slave copies stop for both read and write</span></li><li><span class="Apple-style-span"  style="font-size:medium;">both zones continue to accept writes, and attempt to reconcile any inconsistency on repair</span></li></ul><b><blockquote><span class="Apple-style-span" style="font-weight: normal;"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';">Let's assume again we are using three zones - we could use two but three is more interesting.  To be primary in a replica set, the primary must be visible to a majority of the members of the set: in this case, two thirds of the members, or two thirds of the zones.  If one zone is partitioned from the other two, what will happen is: a member in the 2 zone side of the partition will become primary, if not already.  It will be available for reads and writes.<br /><br />The minority partition will not service writes.  Eventually consistent reads are still possible in the minority partition.<br /><br />Once the partition heals, the servers automatically reconcile.<br /><br /></span></span><a href="http://www.mongodb.org/display/DOCS/Replica+Set+Design+Concepts"><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"> http://www.mongodb.org/display/DOCS/Replica+Set+Design+Concepts</span></span></a><span class="Apple-style-span" style="font-style: normal; font-weight: 800;"><span class="Apple-style-span" style="font-weight: normal;"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></i></span></span></i></span></blockquote><span class="Apple-style-span"  style="font-size:medium;">Question 3: Appending a movie to the favorites list<br /></span></b><span class="Apple-style-span"  style="font-size:medium;">If an update is performed by read-modify-write of the entire list, what mechanisms can be used to avoid race conditions?</span></div><div><p style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font: normal normal normal 13px/normal Consolas; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"></span></span></span></i></p><blockquote><p style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font: normal normal normal 13px/normal Consolas; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">MongoDB supports atomic operations on single documents via both its $ </span></span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">operators ($set, $inc) and also by compare-and-swap operations.  In </span></span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">MongoDB one could model the list as a document per favorite, or, put </span></span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">all the favorites in a single BSON object.  In both cases atomic </span></span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">operations free of race conditions are possible. </span></span></span></i><span class="Apple-style-span" style="color: rgb(23, 56, 245); "><span style="text-decoration: underline; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><a href="http://www.mongodb.org/display/DOCS/Atomic+Operations">http://www.mongodb.org/display/DOCS/Atomic+Operations</a></span></span></i></span></span></p><p style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font: normal normal normal 13px/normal Consolas; min-height: 15px; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></span></i></p><p style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font: normal normal normal 13px/normal Consolas; min-height: 15px; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">This is why mongodb elects a node primary: to facilitate these </span></span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;">atomic operations for use cases where these semantics are required.</span></span></span></i></p></blockquote><p style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font: normal normal normal 13px/normal Consolas; "><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"></span></span></span></i></p></div><div><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></span></i></div><div><span class="Apple-style-span"  style="font-size:medium;">If multiple attribute/values are supported for a key, can an additional value be written directly without reading first? </span></div><div><span class="Apple-style-span"  style="font-family:Consolas;"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"><blockquote><span class="Apple-style-span"  style="font-size:medium;">Yes.</span></blockquote></span></span></i></span></div><div><span class="Apple-style-span"  style="font-size:medium;">What limits exist on the size of the value or number of attribute/values?</span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-family:Georgia, serif;"><span class="Apple-style-span" style=" font-style: normal;"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></span></i></span></div><div> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></i></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">A single BSON document must be under the limit -- currently that </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">limit is 8MB.  If larger than this, one should consider modeling as </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">multiple documents during schema design.</span></span></i></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></i></p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></p><blockquote></blockquote><span class="Apple-style-span"  style="font-size:medium;">and are queries by attribute/value supported?</span><p></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></i></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">Yes. For performance, MongoDB supports secondary (composite) indices.</span></span></i></p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></i></p></div><div><b><span class="Apple-style-span"  style="font-size:medium;">Question 4: Handling Silent Data Corruption</span></b></div><div><span class="Apple-style-span"  style="font-size:medium;">When the storage or network subsystem corrupts data without raising an error, does the NoSQL service detect and correct this? When is it detected and corrected, on write, on read or asynchronously?</span></div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">The general assumption is that the storage system is reliable.  Thus, </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">one would normally use a RAID with mirroring, or a service like EBS </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">which has intrinsic mirroring.</span></span></i></p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></i></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">However, the BSON format has a reasonable amount of structure to it. </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">It is highly probable, although not certain, that a corrupt object </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">would be detected and an error reported.  This could then be correct </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">with a database repair operation.</span></span></i></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></i></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">Note: the above assumes an actual storage system fault.  Another case </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">of interest is simply a hard crash of the server.  MongoDB 1.6 </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">requires a --repair after this.  MongoDB v1.8 (pending) is crash-safe </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">in its storage engine via journaling.</span></span></i></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></p></div><div><span class="Apple-style-span"  style="font-size:medium;"><br /></span></div><div><b><span class="Apple-style-span"  style="font-size:medium;">Question 5: Backup and Restore</span></b></div><div><span class="Apple-style-span"  style="font-size:medium;">Without stopping incoming requests, how can a point in time backup of the entire dataset be performed? What is the performance and availability impact during the backup? </span></div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></i></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">The most used method is to have a replica which is used for backups </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">only; perhaps an inexpensive server or VM.  This node can be taken </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">offline at any time and any backup strategy used.  Once re-enabled, it </span></span></i><span class="Apple-style-span" style="color: rgb(23, 56, 245); "><span style="color:#000000;"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">will catch back up.  </span></span></i></span><span style="text-decoration: underline"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><a href="http://www.mongodb.org/display/DOCS/Backups">http://www.mongodb.org/display/DOCS/Backups</a></span></span></i></span></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><br /></span></span></i></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">With something like EBS, quick snapshotting is possible using the </span></span></i><i><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">fsync-and-lock command.</span></span></i></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><i><span class="Apple-style-span"  style="font-size:medium;"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></span></i></p></div><div><span class="Apple-style-span"  style="font-size:medium;"><br /></span></div><div><span class="Apple-style-span"  style="font-size:medium;">For cases such as roll-back after a buggy application code push, how is a known good version of the dataset restored, how is it made consistent, and what is the performance and availability impact during the restore? Are there any scalability limits on the backed up dataset size, what's the biggest you have seen?</span></div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">One can stop the server(s), restore the old data file images, and restart.</span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"><br /></span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">MongoDB supports a slaveDelay option which allows one to force a </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">replica to stay a certain number of hours behind realtime.  This is a </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">good way to maintain a rolling backup in case of someone </span></i></span><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">"fat-fingering" a database operation.</span></i></span></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:large;"><i></i></span></span></p></div>