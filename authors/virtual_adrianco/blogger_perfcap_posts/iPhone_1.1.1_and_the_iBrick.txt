Title: iPhone 1.1.1 and the iBrick
URL: https://perfcap.blogspot.com/2007/10/iphone-111-and-ibrick.html

This blog just got mentioned by a <a href="http://www.wired.com/gadgets/mac/commentary/cultofmac/2007/10/cultofmac_1003?currentPage=2">Wired News posting about the iPhone</a>. Other than some random spellings of my name I think it picked up on my points quite well.<br /><br />I haven't hacked my iPhone, and it upgraded to 1.1.1 cleanly. The new features and upgrades are welcome, but the upgrade process didn't clear out the ever increasing amount of "Other Memory". I had resorted to removing videos from my iPhone to make space and avoid out of memory errors. You can see 1.6GB in the display below.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2MKU8ibssz-5Ode1VwgJt_mWqyCFojF8ALHOKvnp3AbqhOi46pOIkxROFyZVUVCH_K42sdb3RyMyeOk4R41-9ZuzNzkv0djdfTOdcdh6q9F_UXAbuvpcTcTvr22UEIeHVLZpU/s1600-h/Picture+12.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2MKU8ibssz-5Ode1VwgJt_mWqyCFojF8ALHOKvnp3AbqhOi46pOIkxROFyZVUVCH_K42sdb3RyMyeOk4R41-9ZuzNzkv0djdfTOdcdh6q9F_UXAbuvpcTcTvr22UEIeHVLZpU/s400/Picture+12.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5117337194005869842" /></a><br /><br />I went through the settings, cleared out deleted mail and safari history and it made no difference. I deleted all the content and it made no difference, so I re-loaded the iPhone from scratch, and it dropped to 14MB after I had put my content back.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1E5p47ZOpPYHTWwY5osAWgmRrWMyfPtH916G5vmZEDoplkY-tRjGYOPvkgctQBBjv2yFwKY8gNEw7OW1URPnISw8NTCRetbOise1IbsFw6SIdo-AxO4s013opMddzJDrpYTac/s1600-h/Picture+16.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1E5p47ZOpPYHTWwY5osAWgmRrWMyfPtH916G5vmZEDoplkY-tRjGYOPvkgctQBBjv2yFwKY8gNEw7OW1URPnISw8NTCRetbOise1IbsFw6SIdo-AxO4s013opMddzJDrpYTac/s400/Picture+16.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5117337610617697570" /></a><br /><br />There are some posts on the iPhone support forums about this problem, but no mention of an official fix from Apple. One user claims that it could be related to Google Maps, which I use quite often. I'm going to watch this "other memory" usage to try to figure out which apps are increasing it.<br /><br />I haven't seen a clear explanation of what is going on inside the iPhone that makes hacking applications very different from hacking the carrier, and from my experience building myPhone I can hopefully clarify this issue.<br /><br />There are two CPUs inside just about all phones of any type. One is part of a GSM modem module that interfaces to the phone network, the other is the application CPU that runs the user interface (e.g. OSX on the iPhone). For the Gumstix Goliath a Siemens MC75 module interfaces to the SIM card, and the GSM antenna directly, and has USB, serial and audio interfaces. The way all these GSM modems are managed is by sending it command sequences that would be familiar to any old-timers, its a derivative of the Hayes AT command set. Inside the iPhone is a similar module. The GSM modem has a low speed low power CPU with its own flash memory. The service providers don't like having people mess with this firmware, because it controls the wireless signaling, power levels and cellular communication protocol directly, and they have to be certified for connection to the GSM network. For our homebrew phones we buy Telit or Siemens modules off the shelf and don't mess with their internals, and they just work. Thats why we can build usable homebrew phones.<br /><br />Since this firmware interfaces directly with the SIM card, it can contain code that locks the phone to a particular service provider. The iPhone's GSM modem firmware is locked to AT&T. In order to modify this firmware the unlock applications such as iPhoneSIMFree had to take advantage of a debug feature or security flaw to load modified firmware into the GSM modem. Since the GSM modem is a standard component, hackers were probably able to find out its supplier and part number and get hold of a lot of documentation on how it works.<br /><br />With the 1.1.1 release it appears that Apple closed off some security holes that were being used to hack into the iPhone, but also digitally signed the code inside the phone. This means that any attempt to modify OSX or the GSM firmware breaks the signature, and since the CPUs have hardware support for digital signatures, its extremely difficult to get around this form of protection. Its now several weeks since 1.1.1 was released on the iPhone and iPod Touch and it hasn't been broken into yet. The hackers have to find and exploit a completely new security flaw to get into the application CPU first, then find a way into the GSM modem. It is then easy for Apple to figure out how they are getting in, and fix it in their next release. With Apple releasing monthly updates, there isn't a viable business proposition based on hacking iPhones.<br /><br />I still think Apple has a lot of unreleased iPhone software in the pipeline and will open up to developers when it has pushed out a few more updates. I think the ideal audience for an iPhone developer launch is MacWorld San Francisco in January. The highest density of startups and developers is in the Bay Area, and its the anniversary of the iPhone launch. Thats as near as I'm getting to a prediction....<br /><br />In the meantime, the developers who want something to do could join the <a href="http://www.openmoko.org/">OpenMoko project</a>, help build applications for it and maybe even port the Linux based OpenMoko to the iPhone hardware. Thats what I will be working on when I get myPhone up and running....