Title: The Cockcroft Headroom Plot - Part 1 - Introducing R
URL: https://perfcap.blogspot.com/2006/11/cockcroft-headroom-plot-part-1.html

I've recently written a paper for CMG06 called "Utilization is Virtually Useless as a Metric!". Regular readers of this blog will recognize much of the content in that paper. The follow-on question is what to use instead? The answer I have is to plot response time vs. throughput, and I've been thinking about a very specific way to display this kind of plot. Since I'm feeling quite opinionated about this I'm going to call it a "Cockcroft Headroom Plot" and I'm going to try and construct it using various tools. I will blog my way through the development of this, and I welcome advice and comments along the way.<br /><br />The starting point is a dataset to work with, and I found an old iostat log file that recorded a fairly busy disk at 15 minute intervals over a few days. This gives me 250 data points, which I fed into the <a href="http://www.r-project.org/">R stats package</a> to look at. I'll also have a go at making a spreadsheet version.<br /><br />The iostat data file starts like this:<br /><pre><span style="font-family:courier new;">                    extended device statistics              </span><br /><span style="font-family:courier new;"> r/s  w/s   kr/s   kw/s wait actv wsvc_t asvc_t  %w  %b device</span><br /><span style="font-family:courier new;">14.8 78.4  183.0 2446.3  1.7  0.6   18.6    6.6   1  21 c1t5d0</span><br /><span style="font-family:courier new;"> 0.0  0.0    0.0    0.0  0.0  0.0    0.0    5.0   0   0 c0t6d0</span><br /><span style="font-family:courier new;">...</span><br /></pre><br />I want the second line as a header, so save it (my command line is actually on OSX, but could be Solaris, Linux or Cygwin on Windows)<br /><span style="font-family:courier new;">% head -2 iostat.txt | tail -1 > header</span><br /><br />I want the <span style="font-family:courier new;">c1t5d0</span> disk, but don't want the first line, since its the average since boot, and want to add back the header<br /><span style="font-family:courier new;">% grep c1t5d0 iostat.txt | tail +2 > tailer<br />% cat header tailer > c1t5.txt<br /><br /></span>Now I can import into R as a space delimited file with a header line. R doesn't allow "/" or "%" in names, so it rewrites the header to use dots instead. R is a script based tool with a command line and a very powerful vector/object based syntax. A "data frame" is a table of data object like a sheet in a spreadsheet, it has names for the rows and columns, and can be indexed.<br /><span style="font-family:courier new;">> c1t5 <- read.delim("<path>c1t5.txt",header=T,sep="")</path></span><br /><span style="font-family:courier new;">> names(c1t5)</span><br /><span style="font-family:courier new;"> [1] "r.s"    "w.s"    "kr.s"   "kw.s"   "wait"   "actv"   "wsvc_t" "asvc_t" "X.w"    "X.b"    "device"</span><br /><br />I only want to work with the first 250 data points so I subset the data frame by indexing the rows with an array (<span style="font-family:courier new;">1:250</span>) that selects the rows I want and leaving the column selector blank.<br /><span style="font-family:courier new;">> io250 <- c1t5[1:250,]</span><br /><br />The first thing to do is summarize the data, the output is too wide for the blog so I'll do it in chunks by selecting columns.<br /><pre><br /><span style="font-family:courier new;">> summary(io250[,1:4])</span><br /><span style="font-family:courier new;">      r.s              w.s             kr.s             kw.s        </span><br /><span style="font-family:courier new;"> Min.   :  1.80   Min.   :  1.8   Min.   :  13.5   Min.   :   38.5  </span><br /><span style="font-family:courier new;"> 1st Qu.: 10.30   1st Qu.: 87.1   1st Qu.: 107.4   1st Qu.: 2191.7  </span><br /><span style="font-family:courier new;"> Median : 18.90   Median :172.4   Median : 182.8   Median : 4279.4  </span><br /><span style="font-family:courier new;"> Mean   : 22.85   Mean   :187.5   Mean   : 290.1   Mean   : 4448.5  </span><br /><span style="font-family:courier new;"> 3rd Qu.: 28.88   3rd Qu.:274.6   3rd Qu.: 287.4   3rd Qu.: 6746.6  </span><br /><span style="font-family:courier new;"> Max.   :130.90   Max.   :508.8   Max.   :4232.3   Max.   :13713.1  </span><br /><span style="font-family:courier new;">> summary(io250[,5:8])</span><br /><span style="font-family:courier new;">      wait             actv            wsvc_t           asvc_t      </span><br /><span style="font-family:courier new;"> Min.   : 0.000   Min.   :0.0000   Min.   : 0.000   Min.   : 1.000  </span><br /><span style="font-family:courier new;"> 1st Qu.: 0.000   1st Qu.:0.3250   1st Qu.: 0.400   1st Qu.: 3.125  </span><br /><span style="font-family:courier new;"> Median : 0.600   Median :0.8000   Median : 2.550   Median : 4.700  </span><br /><span style="font-family:courier new;"> Mean   : 1.048   Mean   :0.9604   Mean   : 5.152   Mean   : 4.634  </span><br /><span style="font-family:courier new;"> 3rd Qu.: 1.300   3rd Qu.:1.5000   3rd Qu.: 6.350   3rd Qu.: 5.700  </span><br /><span style="font-family:courier new;"> Max.   :10.600   Max.   :3.5000   Max.   :88.900   Max.   :15.100  </span><br /><span style="font-family:courier new;">> summary(io250[,9:10])</span><br /><span style="font-family:courier new;">      X.w             X.b       </span><br /><span style="font-family:courier new;"> Min.   :0.000   Min.   : 2.00  </span><br /><span style="font-family:courier new;"> 1st Qu.:0.000   1st Qu.:20.00  </span><br /><span style="font-family:courier new;"> Median :1.000   Median :39.50  </span><br /><span style="font-family:courier new;"> Mean   :1.428   Mean   :37.89  </span><br /><span style="font-family:courier new;"> 3rd Qu.:2.000   3rd Qu.:55.00  </span><br /><span style="font-family:courier new;"> Max.   :9.000   Max.   :92.00  </span><br /></pre><br /><span style="font-size:85%;"><span style="font-family:courier new;"></span><span style="font-family:courier new;"></span></span><span style="font-size:85%;"></span><br />Looks like a nice busy disk, so lets plot everything against everything (pch=20 sets a solid dot plotting character)<br /><span style="font-family:courier new;">> plot(io250[,1:10],pch=20)</span><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/549300/Picture%204.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/189207/Picture%204.png" alt="" border="0" /></a>The throughput is either reads+writes or KB read+KB written, the response time is wsvc_t+asvc_t since iostat records time taken waiting to send to a disk as well as time spent actively waiting for a disk.<br /><br />To save typing, I attach to the data frame so that the names are recognized directly.<br /><span style="font-family:courier new;">> attach(io250)</span><br /><span style="font-family:courier new;">> plot(r.s+w.s, wsvc_t+asvc_t)</span><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/660481/Picture%205.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/261600/Picture%205.png" alt="" border="0" /></a>This looks a bit scattered, because there is a mixture of average I/O sizes that varies during the time period. Lets look at throughput in KB/s instead.<br /><span style="font-family:courier new;">> plot(kr.s+kw.s,wsvc_t+asvc_t)</span><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/324809/Picture%206.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/822516/Picture%206.png" alt="" border="0" /></a>That looks promising, but its not clear what the distribution of throughput is over the range. We can look at this using a histogram.<br /><span style="font-family:courier new;">> hist(kr.s+kw.s)</span><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/479325/Picture%207.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/837976/Picture%207.png" alt="" border="0" /></a><br />We can also look at the distribution of response times.<br /><span style="font-family:courier new;">> hist(wsvc_t+asvc_t)</span><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/710275/Picture%208.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/830539/Picture%208.png" alt="" border="0" /></a>The starting point for the thing that I want to call a "Cockcroft Headroom Plot" is all three of these plots superimposed on each other. This means rotating the response time plot 90 degrees so that its axis lines up with the main plot. After looking around in the manual pages I eventually found an example that I could use as the basis for my plot. It needs some more cosmetic work but I defined a new function <span style="font-family:courier new;">chp(throughput, response)</span> shown below.<br /><pre><br />> chp <- function(x,y,xl="Throughput",yl="Response",ml="Cockcroft Headroom Plot") {<br />   xhist <- hist(x,plot=FALSE)<br />   yhist <- hist(y, plot=FALSE)<br />   xrange <- c(0,max(x))<br />   yrange <- c(0,max(y))<br />   nf <- layout(matrix(c(2,0,1,3),2,2,byrow=TRUE), c(3,1), c(1,3), TRUE)<br />   layout.show(nf)<br />   par(mar=c(3,3,1.5,1.5))<br />   plot(x, y, xlim=xrange, ylim=yrange, main=xl)   par(mar=c(0,3,3,1))<br />   barplot(xhist$counts, axes=FALSE, ylim=c(0, max(xhist$counts)), space=0, main=ml)<br />   par(mar=c(3,0,1,1))<br />   barplot(yhist$counts, axes=FALSE, xlim=c(0, max(yhist$counts)), space=0, main=yl, horiz=TRUE)<br />}<br /></pre><br />The result of running <span style="font-family:courier new;">chp(kr.s+kw.s,wsvc_t+asvc_t)</span>is close...<br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/328688/Picture%2010.png"><img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/226742/Picture%2010.png" alt="" border="0" /></a><br /><br />That's enough to get started.