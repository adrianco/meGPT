Title: Cockcroft Headroom Plot - Part 3 - Histogram Fixes
URL: https://perfcap.blogspot.com/2006/11/cockcroft-headroom-plot-part-3.html

I found that I had some scaling issues with the histograms that needed fixing. Ultimately this made the code look a lot more complex, but it now deals with scaling the plot and the histogram with a fixed zero origin on both axes. I think its important to maintain the zero origin for a throughput vs. response time plot.<br /><br />The tricky part is that the main plot is automatically oversized from its data range by a few percent, and the units used in the histogram are completely different. A histogram with 6 bars is scaled to have the bars at unit intervals and is 6 wide plus the width of the bars etc. After lots of trial and error, I made the main plot use the maximum bucket size of the histogram as its max value, and artificially offset the histograms by what looks like about the right amount. The plot below uses fixed data as a test. You can see that the first bar includes two points, thats due to the particular algorithm used by R. Some alternative histogram algorithms are available, but this one seems to be most appropriate to throughput/response time data.<br /><pre><br />> chp(5:10,5:10)<br /></pre><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://photos1.blogger.com/x/blogger2/3864/907/1600/432206/Picture%2012.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://photos1.blogger.com/x/blogger2/3864/907/400/850459/Picture%2012.png" border="0" alt="" /></a><br /><br />The updated code follows.<br /><pre><br />chp <- function(x,y,xl="Throughput",yl="Response",tl="Throughput Over Time",<br />ml="Cockcroft Headroom Plot") {<br />       xhist <- hist(x,plot=FALSE)<br />       yhist <- hist(y, plot=FALSE)<br />       xbf <- xhist$breaks[1]                          # first<br />       ybf <- yhist$breaks[1]                          # first<br />       xbl <- xhist$breaks[length(xhist$breaks)]       # last<br />       ybl <- yhist$breaks[length(yhist$breaks)]       # last<br />       xcl <- length(xhist$counts)                     # count length<br />       ycl <- length(yhist$counts)                     # count length<br />       xrange <- c(0,xbl)<br />       yrange <- c(0,ybl)<br />       nf <- layout(matrix(c(2,4,1,3),2,2,byrow=TRUE), c(3,1), c(1,3), TRUE)<br />       layout.show(nf)<br />       par(mar=c(5,4,0,0))<br />       plot(x, y, xlim=xrange, ylim=yrange, xlab=xl, ylab=yl)<br />       par(mar=c(0,4,3,0))<br />       barplot(xhist$counts, axes=FALSE,<br />               xlim=c(xcl*0.03-xbf/((xbl-xbf)/(xcl-0.5)),xcl*0.97),<br />               ylim=c(0, max(xhist$counts)), space=0, main=ml)<br />       par(mar=c(5,0,0,1))<br />       barplot(yhist$counts, axes=FALSE, xlim=c(0,max(yhist$counts)),<br />               ylim=c(ycl*0.03-ybf/((ybl-ybf)/(ycl-0.5)),ycl*0.97),<br />               space=0, horiz=TRUE)<br />       par(mar=c(2.5,1.7,3,1))<br />       plot(x, main=tl, cex.axis=0.8, cex.main=0.8, type="S")<br />}<br /></pre>