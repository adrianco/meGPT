Title: NoSQL Netflix Use Case Comparison for Riak
URL: https://perfcap.blogspot.com/2010/11/nosql-netflix-use-case-comparison-for.html

<div>Justin Sheehy @justinsheehy of Basho kindly provided a set of answers that I have interspersed with the questions below.</div><div><br /></div><div>The original set of questions are <a href="http://perfcap.blogspot.com/2010/10/comparing-nosql-availability-models.html">posted here</a>. Each NoSQL contender will get their own blog post with answers, when there are enough to be interesting, I will write some summary comparisons.</div><div><br /></div><div>If you have answers or would like to suggest additional questions, comment here, tweet me @adrianco or blog it yourself.</div><div><br /></div><div><b><span class="Apple-style-span"  style="font-size:large;">Use Case Scenario for Comparison Across NoSQL Contenders </span></b></div>While each NoSQL contender has different strengths and will be used for different things, we need a basis for comparison across them, so that we understand the differences in behavior. Here is a sample scenario that I am publishing to put to each vendor to get their answers and will post the results here. The example is non-trivial and is based on a simplified Netflix related scenario that is applicable to any web service that reliably collects data from users via an API. I assume that is running on AWS and use that terminology, but the concepts are generic.<br /><br /><span class="Apple-style-span"  style=" ;font-size:large;"><b>Use Case</b></span><span class="Apple-style-span"  style=" ;font-size:large;"><br /></span>A TV based device calls the API to add a movie to its favorites list (like the Netflix instant queue, but I have simplified the concept here), then reads back the entire list to ensure it is showing the current state. The API does not use cookies, and the load balancer (Amazon Elastic Load Balancer) is round robin, so the second request goes to a different API server, that happens to be in a different Amazon Availability Zone, and needs to respond with the modified list.<div><br /><span class="Apple-style-span"  style="font-size:large;"><b>Favorites Storage<br /></b></span>Favorites store is implemented using a NoSQL mechanism that persistently stores a single key=user value=movielist record on writes, and returns the movielist on reads.</div><div><br /></div><div><span class="Apple-style-span"  style="font-size:large;"><b>Question 1: Availability Zones<br /></b></span>When an API reads and writes to a queue store using the NoSQL mechanism, is the traffic routing Availability Zone aware? Are reads satisfied locally, or spread over all zones, is the initial write local or spread over the zones, is the write replication zone aware so data is repl<span class="Apple-style-span"  style="font-family:'times new roman';">icated to more than one zone?</span></div><div><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></div><blockquote><div><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i><br /></i></span></span></div><div><span class="Apple-style-span"  style="font-family:'times new roman';"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>There are two possibilities with Riak.  The first would be to spread a </i></span></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>single Riak cluster across all three zones, for example one node in </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>each of three zones.  In this case, a single replica of each item </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>would exist in each zone.  Whether or not a response needed to wait on </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>cross-zone traffic to complete would depend on the consistency level </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>in the individual request.  The second option would require Riak </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>EnterpriseDS, and involves placing a complete cluster in each zone and </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>configuring them to perform inter-cluster replication.  This has </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>multiple advantages.  Every request would be satisfied entirely </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>locally, and would be independent of latency or availability </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>characteristics across zone boundaries.  Another benefit is that </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>(unlike either the first scenario or some other solutions that spread </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>clusters and quorums over a long haul) read requests would not </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>generate any cross-zone traffic at all.  For an application with a </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>high percentage of reads, this can make a large difference.</i></span></p></span></div></blockquote><div><span class="Apple-style-span"  style="font-family:'times new roman';"><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p></span><blockquote><i><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"></span></p></i></blockquote><span class="Apple-style-span"  style="font-size:large;"><b>Question 2: Partitioned Behavior with Two Zones<br /></b></span>If the connection between two zones fails, and a partition occurs so that external traffic coming into and staying within a zone continues to work, but traffic between zones is lost, what happens? In particular, which of these outcomes does the NoSQL service support?<br /><ul><li>one zone decides that it is still working for reads and writes but half the size, and the other zone decide it is offline</li><li>both zones continue to satisfy reads, but refuse writes until repaired</li><li>data that has a master copy in the good zone supports read and write, slave copies stop for both read and write</li><li>both zones continue to accept writes, and attempt to reconcile any inconsistency on repair</li></ul><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"></span></i></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">As write-availability is a central goal achieved in Riak, the fourth </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">option will be the observed behavior.  This is the case regardless of </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">the strategy chosen for Question 1.  In the first strategy, local </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">nodes other than the canonical homes for given data will accept the </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">writes instead, using the hinted-handoff technique.  In the second </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">strategy, the local cluster will accept the write, those changes will </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">be replayed across the replication link when the zones are </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">reconnected.  In all cases, vector clocks provide a clean way of </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">resolving most inconsistency, and various reconciliation models are </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">available to the user for those cases which cannot be syntactically </span></i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">resolved.</span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"><br /></span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">For more information on vector clocks in Riak, see:</span></i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;"><br /></span></i></span></p> <p  style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; color:#1738f5;"><span style="text-decoration: underline"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">http://blog.basho.com/2010/01/29/why-vector-clocks-are-easy/</span></i></span></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">and</span></i></span></p> <p  style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; color:#1738f5;"><span style="text-decoration: underline"><span class="Apple-style-span"  style="font-family:'times new roman';"><i><span class="Apple-style-span"  style="font-size:medium;">http://blog.basho.com/2010/04/05/why-vector-clocks-are-hard/</span></i></span></span></p><p  style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; color:#1738f5;"></p></blockquote><p color="#1738f5" style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; "><span style="text-decoration: underline"><br /></span></p></div><div><div></div></div><div><b>Question 3: Appending a movie to the favorites list</b></div>If an update is performed by read-modify-write of the entire list, what mechanisms can be used to avoid race conditions? If multiple attribute/values are supported for a key, can an additional value be written directly without reading first? What limits exist on the size of the value or number of attribute/values, and are queries by attribute/value supported?</div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>Riak will use vector clocks to recognize causality in race conditions. </i></span></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>In the case of two overlapping writes to the same value, Riak will </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>retain both unless explicitly requested to simply overwrite with the </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>last value received.  If one client changes A to B and another changes </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>A to C, then (unless told to overwrite) Riak will return both B and C </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>to the client.  When that client then modifies the object again, the </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>single descendant "D" that they created will be the new value.  For </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>applications such as sets which are mostly added to and rarely deleted </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>from, the application code to perform this reconciliation is trivial </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>and in some cases is simply a set union operation.  This would look a </i></span><span class="Apple-style-span"  style=" ;font-family:'times new roman';"><i>bit like this in terms of vector clock ancestry:</i></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; color:#1738f5;"><span style="text-decoration: underline"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>http://dl.dropbox.com/u/751099/ndiag1.png</i></span></span></span></p><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://dl.dropbox.com/u/751099/ndiag1.png"><img style="cursor:pointer; cursor:hand;width: 445px; height: 365px;" src="http://dl.dropbox.com/u/751099/ndiag1.png" border="0" alt="" /></a><br /><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i><br /></i></span></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>Riak allows values to be of any arbitrary content type, but if the </i></span></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>content is in JSON then a JavaScript map/reduce request can be used to </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>query by attribute/value.</i></span></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p></div><div><div></div></div><div><b>Question 4: Handling Silent Data Corruption</b></div><div>When the storage or network subsystem corrupts data without raising an error, does the NoSQL service detect and correct this? When is it detected and corrected, on write, on read or asynchronously?</div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>Many layers of Riak perform consistency checking, including CRC </i></span></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>checking in the persistence engine and object equality in the </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>distributed state machines handling requests.  In most cases where </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>corruption can be detected in a given replica of some item, that </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>replica will immediately but asynchronously be fixed via read-repair.</i></span></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p></div><div><span class="Apple-style-span"  style="font-size:large;"><b>Question 5: Backup and Restore</b></span></div><div>Without stopping incoming requests, how can a point in time backup of the entire dataset be performed? What is the performance and availability impact during the backup? For cases such as roll-back after a buggy application code push, how is a known good version of the dataset restored, how is it made consistent, and what is the performance and availability impact during the restore? Are there any scalability limits on the backed up dataset size, what's the biggest you have seen?</div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p><blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i>There are two approaches to back up Riak systems: per-node or </i></span></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>whole-cluster.  Backing up per-node is the easiest option for many </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>people, and is quite simple.  Due to bitcask (the default storage </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>engine) performing writes in an append-only fashion and never </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>re-opening any file for writing once closed, Riak nodes can easily be </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>backed up via the filesystem backup method of your choice.  Simply </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>replacing the content of the data directory will reset a node's stored </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>content to what it held at the time.  Alternately, a command line </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>backup command is available which will write out a backup of all data </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>on the cluster.  This is fairly network and disk intensive and </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>requires somewhere to put a whole-cluster backup, but is very useful </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>for prototyping situations which are not holding enormous amounts of </i></span><span class="Apple-style-span" style="font-family: 'times new roman'; "><i>data.</i></span></p></blockquote><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;"><i></i></span></span></p> <p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 13.0px Consolas; min-height: 15.0px"><br /></p></div><i></i>